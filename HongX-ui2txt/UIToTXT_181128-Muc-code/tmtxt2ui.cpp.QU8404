#include "tmtxt2ui.h"
#include "ui_tmtxt2ui.h"

#include <QDir>
#include <QFile>
#include <QDebug>
#include <QFileDialog>
#include <QTableWidget>
#include <QMessageBox>
#include <QTextDocument>
#include <QSettings>
#include <QTableWidgetItem>

#define  MAX_ROWS_ONE_PAGE      10
#define  MAX_ROWS_ALL_PAGE      200


//setxt=./TM_UI/res_7HT/form
//qtui=./UIDir

TMTxt2UI::TMTxt2UI(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::TMTxt2UI)
{
    ui->setupUi(this);

    Init();
}

TMTxt2UI::~TMTxt2UI()
{
    delete ui;
}

void TMTxt2UI::Init()
{
    mUIDirPath = "";
    mTXTDirPath = "";
    ltNames.clear();

    model = new QFileSystemModel;
    model->setNameFilters(QStringList() << "*.txt");
    model->setNameFilterDisables(false);
    model->setRootPath(QDir::currentPath());

    model2 = new QFileSystemModel;
    model2->setNameFilters(QStringList() << "*.ui");
    model2->setNameFilterDisables(false);
    model2->setRootPath(QDir::currentPath());

    InitPropertyType();
    InitForm();
}

void TMTxt2UI::InitForm()
{
    ui->tableWgt->setModel(model);
    ui->tableWgt->setRootIndex(model->index(mTXTDirPath));

    ui->tableWgt2->setModel(model2);
    ui->tableWgt2->setRootIndex(model->index(mUIDirPath));
}

void TMTxt2UI::InitPropertyType()
{
    mapProperty.clear();

    QSettings *pConf = new QSettings("./property.ini", QSettings::IniFormat);
    if(pConf){

        QStringList ltKey = pConf->allKeys();
        foreach (QString key, ltKey) {
            mapProperty.insert(key.remove("SE-WND/"), pConf->value(key, "11").toInt());
        }
        mTXTDirPath = pConf->value("SE-WND/setxt", "./TM_UI/res_7HT/form").toString();
        mUIDirPath = pConf->value("SE-WND/qtui", "./UIDir").toString();
        //qDebug() << "********* Init mapProperty ok: count =" << mapProperty;
        delete pConf;
        pConf = NULL;
    }
}

QString GetFileName(const QString &path, bool delForm =false)
{
    QString name = "";
    int ndex =0;
    ndex = path.lastIndexOf("/");
    name = path.right(path.length() - ndex - 1 );

    if(delForm) name = name.remove(".txt");
    return name;
}

QString GetTypeNmae(int ntype)
{
    if(ntype==tmBOOL) return "bool";
    else if(ntype==tmCHAR) return "char";
    else if(ntype==tmFLOAT || ntype==tmDOUBLE) return "double";
    else if(ntype==tmSHORT || ntype==tmINT) return "number";
    else if(ntype==tmLONG || ntype==tmINT64) return "longlong";
    else if(ntype==tmBYTE || ntype==tmWORD || ntype==tmDWORD) return "UInt";
    else return "string";
}

int GetXYFromStr(const QString &temp){
    if(temp.contains("+")){
        QStringList ltTxt;
        ltTxt.clear();
        ltTxt = temp.split("+");
        QString temp1,temp2;
        temp1 = ltTxt.at(0);
        temp2 = ltTxt.at(1);
        return temp1.toInt() + temp2.toInt();
    }else return temp.toInt();
}

int GetWHFromStr(const QString &temp, int wh)
{
    //QString temp = "1720 + left + 2233";

    if(temp.contains("+")){
        QRegExp rx("(\\d+)");  // 匹配数字
        int pos = 0;
        while ((pos = rx.indexIn(temp, pos)) != -1) {
            //qDebug()<<rx.cap(0).toInt();
            return rx.cap(0).toInt();
            pos += rx.matchedLength();
        }
    }else return temp.toInt() - wh;
}

bool HandlePropertyName(QString &temp){
    while(temp.contains("-")){
        QString str = "";
        int ndex = temp.indexOf("-");
        temp.remove(ndex, 1);
        str = temp.mid(ndex, 1);
        temp.replace(ndex, 1, str.toUpper());
    }

    return true;
}

bool HandlePropertyValue(QString &type, QString &value){

    if(type=="bool"){
        value = value.toLower();
    }else if(type=="bytearry"||type=="int"||type=="UInt"||type=="longlong"){
        if(value.contains("0x")){
            bool ok = true;
            int nval = value.toInt(&ok, 16);
            value = QString::number(nval);
        }
    }
    return true;
}

bool HandleStrHelper(const QString &temp, const QString &filter,
                     QString &temp1, QString &temp2)
{

    if(temp.isEmpty() || filter.isEmpty()) return false;
    if(!temp.contains(filter)) return false;

    if(filter==":" || filter=="="){
        QStringList ltTxt;
        ltTxt.clear();
        ltTxt = temp.split(filter);

        temp1 = ltTxt.at(0);
        temp2 = ltTxt.at(1);
        temp1 = temp1.trimmed();
        temp2 = temp2.trimmed();

        if(temp1.isEmpty()) return false;

    }else{
        return false;
    }

    return true;
}

void TMTxt2UI::DoTask()
{
    if(mUIDirPath.isEmpty()) return;
    if(ltNames.isEmpty()){
        QMessageBox::critical(this, tr("警告！"), tr("请先选择文件！"));
        return;
    }

    QString path2 ="";

    foreach (QString path1, ltNames) {
        path2 = GetFileName(path1, true);
        path2 = mUIDirPath + "/" + path2 + ".ui";

        Txt2Ui_Fun(path1, path2);
    }

}

void TMTxt2UI::UpdateTableWgt()
{
}

void TMTxt2UI::Txt2Ui_Fun(const QString &path1, const QString &path2)
{
    if(path1.isEmpty() || path2.isEmpty()){
        return;
    }

    // @
    QFile fl1(path1);
    if(!fl1.open(QFile::ReadOnly)){
        return;
    }

    // @ open file
    QFile fl2(path2);
    if(!fl2.open(QFile::WriteOnly | QFile::Text | QFile::Truncate)){
        //QMessageBox::warning(NULL, "Warnning!", tr("保存xml文件失败!"));
        return;
    }

    bool Flag_Root = false;
    bool Flag_Widget = false;
    bool Flag_Window = false;
    bool Flag_Rect  = false;
    QString strLine ="";
    QByteArray arrLine ="";
    QString temp1,temp2;

    // @ begin write
    QXmlStreamWriter writer(&fl2);
    writer.setAutoFormatting(true);
    writer.writeStartDocument();

    // @ root: ui
    writer.writeStartElement("ui");
    writer.writeAttribute("version", "4.0");

    qDebug() << "***** fl1.atEnd =" << fl1.atEnd();

    // @ body
    while(!fl1.atEnd()){
        arrLine = fl1.readLine();
        strLine = QString(arrLine);
        //qDebug() << "read line =" << strLine;

        if(strLine.isEmpty()) continue;
        if(strLine.contains("//")) continue;

        if(!Flag_Root){
            if(strLine.contains(":")){
                if(HandleStrHelper(strLine, ":", temp1, temp2)){
                    // @ class name
                    if(temp2!="CtmFormView") continue;
                    writer.writeTextElement("class", temp1);

                    // @ widget -- window
                    writer.writeStartElement("widget");
                    writer.writeAttribute("class", temp2);;
                    writer.writeAttribute("name", temp1);

                    // @ set flag
                    Flag_Rect = true;
                    Flag_Root = true;
                    Flag_Window = true;
                }
            }
        }else{
            if(Flag_Window){
                if(strLine.contains("=")){
                    Txt2Ui_wWgt(writer, strLine, "=");
                }
                // @ start widget
                else if(strLine.contains(":")){
                    if(Txt2Ui_wWgt(writer, strLine, ":")){
                        Flag_Widget = true;
                        Flag_Window = false;
                    }
                }
            }else{
                if(Flag_Widget){
                    if(strLine=="end"){
                        Flag_Widget = false;
                        writer.writeEndElement();
                    }else if(strLine.contains("=")){
                        Txt2Ui_wWgt(writer, strLine, "=");
                    }
                }else{
                    if(strLine=="end"){
                        writer.writeEndElement();// end widget -- window
                    }else if(strLine.contains(":")){
                        if(Txt2Ui_wWgt(writer, strLine, ":")){
                            Flag_Widget = true;
                        }
                    }
                }
            }
        }
    }

    writer.writeEndElement(); // end root -- ui
    writer.writeEndDocument(); // end document

    fl1.close();
    fl2.close();
}

bool TMTxt2UI::Txt2Ui_wWgt(QXmlStreamWriter &writer, const QString &strLine, const QString &filter)
{
    static int nx =0;
    static int ny =0;
    static int nw =0;
    static int nh =0;
    QString temp1, temp2;
    temp1 = temp2 ="";

    if(HandleStrHelper(strLine, "=", temp1, temp2)){
        // @ property: geometry
        if(temp1=="left"){
            nx = GetXYFromStr(temp2);
            writer.writeStartElement("property");
            writer.writeAttribute("name", "geometry");
            writer.writeStartElement("rect");
            writer.writeTextElement("x", QString::number(nx));
        }else if(temp1=="top"){
            ny = GetXYFromStr(temp2);
            writer.writeTextElement("y", QString::number(ny));
        }else if(temp1=="right"){
            nw = GetWHFromStr(temp2, nx);
            writer.writeTextElement("width", QString::number(nw));
        }else if(temp1=="bottom"){
            nh = GetWHFromStr(temp2, ny);
            writer.writeTextElement("height", QString::number(nh));
            writer.writeEndElement();
            writer.writeEndElement();
        }
        // @ property: other
        else{
            QString stype = GetTypeNmae(mapProperty.value(temp1, 11));

            //qDebug() << "************* 1 =" << temp1 << ", =" << mapProperty.value(temp1) << ", type =" << stype;
            if(temp1=="orientation") temp1="direction";
            else if(temp1.contains("-")) HandlePropertyName(temp1);

            HandlePropertyValue(stype, temp2);

            writer.writeStartElement("property");
            writer.writeAttribute("name", temp1);
            writer.writeTextElement(stype, temp2);
            writer.writeEndElement();
        }

        return true;
    }else if(HandleStrHelper(strLine, ":", temp1, temp2)){

        // @ widget
        writer.writeStartElement("widget");
        writer.writeAttribute("class", temp2);;
        writer.writeAttribute("name", temp1);

        return true;
    }

    return false;
}

void TMTxt2UI::on_btnSelect_clicked()
{
    InitPropertyType();

    ui->tableWgt->setRootIndex(model->index(mTXTDirPath));
    ui->tableWgt2->setRootIndex(model2->index(mUIDirPath));

//    UpdateTableWgt();
}

void TMTxt2UI::on_btnDoIt_clicked()
{
    //mUIDirPath = QFileDialog::getExistingDirectory(this, tr("文件保存"), "./");
    if(!mUIDirPath.isEmpty()) DoTask();
}

void TMTxt2UI::on_checkBox_clicked(bool checked)
{
    int ndex = ui->tabWidget->currentIndex();


}

void TMTxt2UI::on_tabWidget_currentChanged(int index)
{
        ui->checkBox->setVisible(!index);
        ui->btnDoIt->setVisible(!index);
}
